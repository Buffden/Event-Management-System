name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: 'test_password'
  POSTGRES_DB: 'ems_test'
  POSTGRES_USER: 'test_user'

jobs:
  # Test all microservices in parallel
  test-microservices:
    name: Test Microservices
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, event-service, booking-service, notification-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ems-services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ems-services/${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ems-services/${{ matrix.service }}
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          JWT_SECRET: 'test_jwt_secret_key_for_github_actions'
          RABBITMQ_URL: 'amqp://localhost:5672'
          REDIS_URL: 'redis://localhost:6379'

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.service }}
          path: ems-services/${{ matrix.service }}/coverage/
          retention-days: 30

  # Test frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ems-client/package-lock.json

      - name: Install dependencies
        working-directory: ems-client
        run: npm ci

      - name: Run tests
        working-directory: ems-client
        run: npm test
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: 'http://localhost:3001'
          NEXT_PUBLIC_APP_NAME: 'Event Management System'

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-frontend
          path: ems-client/coverage/
          retention-days: 30

  # Integration tests with real database
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies for all services
        run: |
          cd ems-services/auth-service && npm ci
          cd ../event-service && npm ci
          cd ../booking-service && npm ci
          cd ../notification-service && npm ci
          cd ../../ems-client && npm ci

      - name: Run database migrations
        run: |
          cd ems-services/auth-service && npx prisma migrate deploy
          cd ../event-service && npx prisma migrate deploy
          cd ../booking-service && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          echo "This is a placeholder for future integration test implementation"
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          RABBITMQ_URL: amqp://guest:guest@localhost:5672
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: 'test_jwt_secret_key_for_github_actions'

  # Coverage summary
  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: [test-microservices, test-frontend]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/

      - name: Display coverage summary
        run: |
          echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Check if coverage files exist and display summary
          for service in auth-service event-service booking-service notification-service frontend; do
            if [ -d "coverage-reports/coverage-$service" ]; then
              echo "| $service | ✅ Passed | Available |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $service | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Coverage reports are available as artifacts for download." >> $GITHUB_STEP_SUMMARY

  # Lint check
  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ems-services/auth-service && npm ci
          cd ../event-service && npm ci
          cd ../booking-service && npm ci
          cd ../notification-service && npm ci
          cd ../../ems-client && npm ci

      - name: Run ESLint
        run: |
          echo "Running ESLint checks..."
          # Add lint commands for each service when available
          echo "Lint checks completed"

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ems-services/auth-service && npm ci
          cd ../event-service && npm ci
          cd ../booking-service && npm ci
          cd ../notification-service && npm ci
          cd ../../ems-client && npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          cd ems-services/auth-service && npm audit --audit-level moderate || true
          cd ../event-service && npm audit --audit-level moderate || true
          cd ../booking-service && npm audit --audit-level moderate || true
          cd ../notification-service && npm audit --audit-level moderate || true
          cd ../../ems-client && npm audit --audit-level moderate || true
