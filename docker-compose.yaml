# This section defines all the containers (services) that make up your application.
services:
  #########################################
  #   APPLICATION SERVICES
  #########################################
  ems-client:
    build:
      context: ./ems-client
      dockerfile: Dockerfile
    container_name: ems-client
    env_file:
      ./ems-client/.env.production
    networks:
      - event-net

  ems-gateway:
    build:
      context: ./ems-gateway
      dockerfile: Dockerfile
    container_name: ems-gateway
    ports:
      - "80:80"
    volumes:
      - ./ems-gateway/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - event-net
    depends_on:
      - ems-client
      - auth-service
      - event-service
      - booking-service
      - speaker-service
      - notification-service

  #########################################
  #   BACKEND MICROSERVICES
  #########################################
  auth-service: &base-service
    build:
      context: ./ems-services/auth-service
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://admin:password@auth-service-db:5432/auth_db
    container_name: auth-service
    restart: unless-stopped
    env_file:
      ./ems-services/auth-service/.env.production
    networks:
      - event-net
    depends_on:
      auth-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  event-service:
    <<: *base-service
    build:
      context: ./ems-services/event-service
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://admin:password@event-service-db:5432/event_db
    container_name: event-service
    environment:
      - TZ=America/Chicago
    env_file:
      ./ems-services/event-service/.env.production
    networks:
      - event-net
    depends_on:
      event-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      auth-service:
        condition: service_started

  booking-service:
    <<: *base-service
    build:
      context: ./ems-services/booking-service
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://admin:password@booking-service-db:5432/booking_db
    container_name: booking-service
    env_file:
      ./ems-services/booking-service/.env.production
    networks:
      - event-net
    depends_on:
      booking-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  feedback-service:
    <<: *base-service
    build:
      context: ./ems-services/feedback-service
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://admin:password@feedback-service-db:5432/feedback_db
    container_name: feedback-service
    env_file:
      ./ems-services/feedback-service/.env.production
    networks:
      - event-net
    depends_on:
      feedback-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  notification-service:
    build:
      context: ./ems-services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    env_file:
      ./ems-services/notification-service/.env.production
    networks:
      - event-net
    depends_on:
      rabbitmq:
        condition: service_started

  speaker-service:
    <<: *base-service
    build:
      context: ./ems-services/speaker-service
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgresql://admin:password@speaker-service-db:5432/speaker_db
    container_name: speaker-service
    env_file:
      ./ems-services/speaker-service/.env.production
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
    networks:
      - event-net
    depends_on:
      speaker-service-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  #########################################
  #   DATABASES FOR MICROSERVICES
  #########################################

  auth-service-db: &base-service-db
    image: postgres:14-alpine
    container_name: auth-service-db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=auth_db
    volumes:
      - auth-service-data:/var/lib/postgresql/data
    networks:
      - event-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5

  event-service-db:
    <<: *base-service-db
    container_name: event-service-db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=event_db
    volumes:
      - event-service-data:/var/lib/postgresql/data

  booking-service-db:
    <<: *base-service-db
    container_name: booking-service-db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=booking_db
    volumes:
      - booking-service-data:/var/lib/postgresql/data

  feedback-service-db:
    <<: *base-service-db
    container_name: feedback-service-db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=feedback_db
    volumes:
      - feedback-service-data:/var/lib/postgresql/data

  speaker-service-db:
    <<: *base-service-db
    container_name: speaker-service-db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=speaker_db
    volumes:
      - speaker-service-data:/var/lib/postgresql/data

  #########################################
  #   INFRASTRUCTURE SERVICES
  #########################################
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Persistent storage for RabbitMQ data
      - rabbitmq_log:/var/log/rabbitmq/  # Persistent storage for RabbitMQ
    networks:
      - event-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s # Give RabbitMQ time to start up before checking

# This section defines the custom network for our services to communicate.
networks:
  event-net:
    driver: bridge

# This section defines a volume for persisting data.
volumes:
  auth-service-data:
  event-service-data:
  booking-service-data:
  feedback-service-data:
  speaker-service-data:
  rabbitmq_data:
  rabbitmq_log:
