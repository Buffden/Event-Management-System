generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to represent the state of a booking.
enum BookingStatus {
  CONFIRMED
  CANCELLED
}

// Enum to represent the state of a ticket.
enum TicketStatus {
  ISSUED
  SCANNED
  REVOKED
  EXPIRED
}

// Enum to represent the scan method used.
enum ScanMethod {
  QR_CODE
  MANUAL
}

// A simplified, local representation of an event.
// This data is populated by consuming 'event.published' messages
// and is used for quick capacity checks.
model Event {
  id        String    @id // This ID must match the ID from the Event Service
  capacity  Int
  isActive  Boolean   @default(true) // Set to false when 'event.cancelled' is consumed
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("events")
}

// Represents a user's registration for a specific event.
model Booking {
  id     String        @id @default(cuid())
  userId String        // Foreign key for the user from the Auth Service
  eventId String       // Foreign key for the local Event model

  status    BookingStatus @default(CONFIRMED)
  event     Event         @relation(fields: [eventId], references: [id])
  
  // Ticket relationship
  ticket    Ticket?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, eventId]) // A user can only book an event once
  @@map("bookings")
}

// Represents a digital ticket generated for a booking.
model Ticket {
  id             String       @id @default(cuid())
  bookingId      String       @unique // One ticket per booking
  qrCodeData     String       @unique // Unique QR code data
  status         TicketStatus @default(ISSUED)
  issuedAt       DateTime     @default(now())
  scannedAt      DateTime?
  expiresAt      DateTime     // Tickets expire 2 hours after event ends
  
  // Foreign keys
  userId         String       // User who owns the ticket
  eventId        String       // Event this ticket is for
  
  // Relationships
  booking        Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  qrCode         QRCode?
  attendanceRecords AttendanceRecord[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([qrCodeData]) // Index for fast QR code lookups
  @@index([userId]) // Index for user ticket queries
  @@index([eventId]) // Index for event ticket queries
  @@map("tickets")
}

// Represents QR code data and metadata.
model QRCode {
  id          String   @id @default(cuid())
  ticketId    String   @unique
  data        String   @unique // The actual QR code data
  format      String   @default("PNG") // Image format
  expiresAt   DateTime // QR code expiration
  scanCount   Int      @default(0) // Track how many times it's been scanned
  
  // Relationships
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([data]) // Index for fast QR code data lookups
  @@map("qr_codes")
}

// Represents attendance records when tickets are scanned.
model AttendanceRecord {
  id           String     @id @default(cuid())
  ticketId     String
  scanTime     DateTime   @default(now())
  scanLocation String?    // Where the ticket was scanned
  scannedBy    String?    // Staff member who scanned the ticket
  scanMethod   ScanMethod @default(QR_CODE)
  
  // Relationships
  ticket       Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime   @default(now())

  @@index([ticketId]) // Index for ticket attendance queries
  @@index([scanTime]) // Index for time-based queries
  @@map("attendance_records")
}