generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to represent the state of a booking.
enum BookingStatus {
  CONFIRMED
  CANCELLED
}

// A simplified, local representation of an event.
// This data is populated by consuming 'event.published' messages
// and is used for quick capacity checks.
model Event {
  id        String    @id // This ID must match the ID from the Event Service
  capacity  Int
  isActive  Boolean   @default(true) // Set to false when 'event.cancelled' is consumed
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("events")
}

// Represents a user's registration for a specific event.
model Booking {
  id     String        @id @default(cuid())
  userId String        // Foreign key for the user from the Auth Service
  eventId String       // Foreign key for the local Event model

  status    BookingStatus @default(CONFIRMED)
  event     Event         @relation(fields: [eventId], references: [id])

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, eventId]) // A user can only book an event once
  @@map("bookings")
}