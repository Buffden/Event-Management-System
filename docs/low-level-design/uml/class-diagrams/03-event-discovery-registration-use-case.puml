@startuml EventDiscoveryBookingUseCase
title Event Discovery & Booking Use Case - Class Diagram

' Core Domain Entities
class Event {
  - id: string
  - title: string
  - description: string
  - startDate: Date
  - endDate: Date
  - venueId: string
  - capacity: number
  - currentBookings: number
  - status: EventStatus
  + getId(): string
  + getTitle(): string
  + getCapacity(): number
  + getCurrentBookings(): number
  + isAvailable(): boolean
  + hasCapacity(): boolean
  + getAvailableSpots(): number
}

class Booking {
  - id: string
  - userId: string
  - eventId: string
  - status: BookingStatus
  - createdAt: Date
  - confirmedAt: Date
  - waitlistPosition: number
  + getId(): string
  + getUserId(): string
  + getEventId(): string
  + getStatus(): BookingStatus
  + isConfirmed(): boolean
  + isWaitlisted(): boolean
  + confirm(): void
  + moveToWaitlist(position: number): void
  + cancel(): void
}

class User {
  - id: string
  - email: string
  - role: Role
  - isActive: boolean
  + getId(): string
  + getEmail(): string
  + getRole(): Role
  + canBook(): boolean
}

enum BookingStatus {
  PENDING
  CONFIRMED
  WAITLISTED
  CANCELLED
}

' Domain Services
class EventDiscoveryService {
  - eventRepository: EventRepository
  - searchStrategy: SearchStrategy
  + browseEvents(filters: EventFilters): Event[]
  + searchEvents(query: string, filters: EventFilters): Event[]
  + getEventDetails(eventId: string): EventDetails
  + getAvailableEvents(): Event[]
  + getUpcomingEvents(): Event[]
}

class BookingService {
  - bookingRepository: BookingRepository
  - eventRepository: EventRepository
  - userRepository: UserRepository
  - capacityManager: CapacityManager
  - waitlistManager: WaitlistManager
  + bookForEvent(userId: string, eventId: string): BookingResult
  + cancelBooking(bookingId: string): void
  + getBookingStatus(bookingId: string): BookingStatus
  + getUserBookings(userId: string): Booking[]
  + handleWaitlistPromotion(eventId: string): void
}

class CapacityManager {
  - eventRepository: EventRepository
  - bookingRepository: BookingRepository
  + checkCapacity(eventId: string): CapacityStatus
  + getAvailableSpots(eventId: string): number
  + isAtCapacity(eventId: string): boolean
  + updateCapacity(eventId: string, newCapacity: number): void
}

class WaitlistManager {
  - bookingRepository: BookingRepository
  + addToWaitlist(userId: string, eventId: string): Booking
  + getWaitlistPosition(bookingId: string): number
  + promoteFromWaitlist(eventId: string): Booking[]
  + getWaitlistForEvent(eventId: string): Booking[]
}

' Application Handlers
class BrowseEventsHandler {
  - eventDiscoveryService: EventDiscoveryService
  + handle(request: BrowseEventsRequest): BrowseEventsResponse
}

class BookForEventHandler {
  - bookingService: BookingService
  + handle(request: BookForEventRequest): BookForEventResponse
}

class CancelBookingHandler {
  - bookingService: BookingService
  + handle(request: CancelBookingRequest): CancelBookingResponse
}

' Infrastructure Layer
interface EventRepository {
  + findById(id: string): Event | null
  + findByStatus(status: EventStatus): Event[]
  + findByDateRange(startDate: Date, endDate: Date): Event[]
  + searchByTitle(title: string): Event[]
  + findAvailableEvents(): Event[]
}

interface BookingRepository {
  + findById(id: string): Booking | null
  + findByUserId(userId: string): Booking[]
  + findByEventId(eventId: string): Booking[]
  + findByUserAndEvent(userId: string, eventId: string): Booking | null
  + countByEventId(eventId: string): number
  + findWaitlistedByEventId(eventId: string): Booking[]
  + save(booking: Booking): void
  + delete(id: string): void
}

interface SearchStrategy {
  + search(query: string, filters: EventFilters): Event[]
}

' DTOs
class BrowseEventsRequest {
  + filters: EventFilters
  + page: number
  + limit: number
}

class BookForEventRequest {
  + userId: string
  + eventId: string
}

class BookingResult {
  + booking: Booking
  + status: BookingStatus
  + message: string
  + waitlistPosition?: number
}

class EventFilters {
  + startDate?: Date
  + endDate?: Date
  + venueId?: string
  + status?: EventStatus
  + hasCapacity?: boolean
}

' Relationships
Event ||--o{ Booking : "has"
User ||--o{ Booking : "creates"
Booking ||--|| BookingStatus : "has"

EventDiscoveryService --> EventRepository : "uses"
EventDiscoveryService --> SearchStrategy : "uses"

BookingService --> BookingRepository : "uses"
BookingService --> EventRepository : "uses"
BookingService --> UserRepository : "uses"
BookingService --> CapacityManager : "uses"
BookingService --> WaitlistManager : "uses"

CapacityManager --> EventRepository : "uses"
CapacityManager --> BookingRepository : "uses"

WaitlistManager --> BookingRepository : "uses"

BrowseEventsHandler --> EventDiscoveryService : "uses"
BookForEventHandler --> BookingService : "uses"
CancelBookingHandler --> BookingService : "uses"

@enduml
