@startuml DigitalTicketingUseCase
title Digital Ticketing System Use Case - Class Diagram

' Core Domain Entities
class Ticket {
  - id: string
  - registrationId: string
  - qrCode: string
  - status: TicketStatus
  - issuedAt: Date
  - scannedAt: Date
  + getId(): string
  + getRegistrationId(): string
  + getQRCode(): string
  + getStatus(): TicketStatus
  + isScanned(): boolean
  + markAsScanned(): void
  + updateStatus(newStatus: TicketStatus): void
}

class QRCode {
  - id: string
  - data: string
  - format: string
  - expiresAt: Date
  - createdAt: Date
  + getId(): string
  + getData(): string
  + getFormat(): string
  + isExpired(): boolean
  + generateData(ticketId: string): string
}

class Registration {
  - id: string
  - userId: string
  - eventId: string
  - status: RegistrationStatus
  - createdAt: Date
  + getId(): string
  + getUserId(): string
  + getEventId(): string
  + getStatus(): RegistrationStatus
  + isConfirmed(): boolean
  + confirm(): void
}

enum TicketStatus {
  ISSUED
  SCANNED
  REVOKED
}

enum RegistrationStatus {
  CONFIRMED
  CANCELLED
}

' Domain Services
class TicketIssuanceService {
  - ticketRepository: TicketRepository
  - qrCodeGenerator: QRCodeGenerator
  - emailService: EmailService
  - clock: Clock
  + generateTicket(registrationId: string): Ticket
  + sendTicket(ticketId: string, userEmail: string): void
  + updateTicketStatus(ticketId: string, newStatus: TicketStatus): void
  + validateQRCode(qrCodeData: string): boolean
}

class TicketValidationService {
  - ticketRepository: TicketRepository
  - attendanceRepository: AttendanceRepository
  - clock: Clock
  + validateTicket(qrCodeData: string): TicketValidationResult
  + recordAttendance(ticketId: string, staffId: string): Attendance
  + checkTicketStatus(ticketId: string): TicketStatus
}

' Application Handlers
class GenerateTicketHandler {
  - ticketIssuanceService: TicketIssuanceService
  + handle(request: GenerateTicketRequest): GenerateTicketResponse
}

class SendTicketHandler {
  - ticketIssuanceService: TicketIssuanceService
  + handle(request: SendTicketRequest): SendTicketResponse
}

class ValidateTicketHandler {
  - ticketValidationService: TicketValidationService
  + handle(request: ValidateTicketRequest): ValidateTicketResponse
}

' Infrastructure Layer
interface TicketRepository {
  + findById(id: string): Ticket | null
  + findByRegistrationId(registrationId: string): Ticket | null
  + findByQRCode(qrCode: string): Ticket | null
  + save(ticket: Ticket): void
  + update(ticket: Ticket): void
}

interface QRCodeGenerator {
  + generate(ticketId: string): QRCode
  + validate(qrCodeData: string): boolean
}

interface EmailService {
  + sendTicketEmail(ticketId: string, userEmail: string, ticketData: TicketData): void
  + sendTicketReminder(ticketId: string, userEmail: string): void
}

interface AttendanceRepository {
  + save(attendance: Attendance): void
  + findByTicketId(ticketId: string): Attendance[]
}

' DTOs
class GenerateTicketRequest {
  + registrationId: string
  + userId: string
  + eventId: string
}

class SendTicketRequest {
  + ticketId: string
  + userEmail: string
}

class ValidateTicketRequest {
  + qrCodeData: string
  + staffId: string
}

class TicketValidationResult {
  + isValid: boolean
  + ticket: Ticket | null
  + message: string
}

class Attendance {
  - id: string
  - ticketId: string
  - eventId: string
  - staffId: string
  - scanTime: Date
  - scanMethod: ScanMethod
  + getId(): string
  + getTicketId(): string
  + getEventId(): string
  + getScanTime(): Date
}

enum ScanMethod {
  QR_CODE
  MANUAL
}

' Relationships
Ticket ||--|| Registration : "belongs to"
Ticket ||--|| QRCode : "has"
Ticket ||--|| TicketStatus : "has"
Registration ||--|| RegistrationStatus : "has"

TicketIssuanceService --> TicketRepository : "uses"
TicketIssuanceService --> QRCodeGenerator : "uses"
TicketIssuanceService --> EmailService : "uses"

TicketValidationService --> TicketRepository : "uses"
TicketValidationService --> AttendanceRepository : "uses"

GenerateTicketHandler --> TicketIssuanceService : "uses"
SendTicketHandler --> TicketIssuanceService : "uses"
ValidateTicketHandler --> TicketValidationService : "uses"

GenerateTicketHandler --> GenerateTicketRequest : "handles"
SendTicketHandler --> SendTicketRequest : "handles"
ValidateTicketHandler --> ValidateTicketRequest : "handles"

TicketIssuanceService --> Ticket : "creates"
TicketValidationService --> Attendance : "creates"
TicketValidationService --> TicketValidationResult : "returns"

@enduml
